<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>threejs on #a5ebec</title>
    <link>https://blog.5ebec.dev/tags/threejs/</link>
    <description>Recent content in threejs on #a5ebec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 14 Nov 2019 18:50:08 +0000</lastBuildDate>
    
	<atom:link href="https://blog.5ebec.dev/tags/threejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>webpack &#43; typescript &#43; three.js で GLSL (.frag|.vert) を外部モジュールとして import する</title>
      <link>https://blog.5ebec.dev/posts/webpack-typescript-three-js-%E3%81%A7-glsl-frag-vert-%E3%82%92%E5%A4%96%E9%83%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6-import-%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 14 Nov 2019 18:50:08 +0000</pubDate>
      
      <guid>https://blog.5ebec.dev/posts/webpack-typescript-three-js-%E3%81%A7-glsl-frag-vert-%E3%82%92%E5%A4%96%E9%83%A8%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%97%E3%81%A6-import-%E3%81%99%E3%82%8B/</guid>
      <description>TL;DR  型定義ファイルを用意 raw-loader を使用  はじめに three.js で ShaderMaterial や RawShaderMaterial を使うと，自作した GLSL を利用することが出来る．
公式ドキュメントで紹介されている方法や，「three.js glsl」とかで検索して出てくる大抵の記事には html や js に直書きしている例が見られる． しかし，これではシンタックスハイライトは効かないし見栄えも良くない．
.d.ts 型定義ファイル (.d.ts) を .(frag|vert) ファイルと同じ場所に用意．
: ├── src │ ├── glsl │ │ ├── glsl.d.ts │ │ ├── hoge.frag │ │ └── hoge.vert │ └── index.ts : ファイル名は適当で良いが，自分は glsl.d.ts とした．
内容は以下の通り．
declare module &amp;#39;*.vert&amp;#39; { const src: string; export default src; } declare module &amp;#39;*.frag&amp;#39; { const src: string; export default src; }  .</description>
    </item>
    
  </channel>
</rss>